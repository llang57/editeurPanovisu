name: 🚀 Build Multi-Platform Installers

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 3.3.2)'
        required: true
        default: '3.3.2'

jobs:
  build-windows:
    name: 🪟 Windows Installer
    runs-on: windows-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java 25
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'
      
      - name: 🛠️ Install Inno Setup
        run: |
          choco install innosetup -y
          Write-Host "✅ Inno Setup installé"
        shell: pwsh
      
      - name: 📝 Create api-keys.properties
        run: |
          Copy-Item api-keys.properties.template api-keys.properties
          Write-Host "✅ api-keys.properties créé depuis template"
        shell: pwsh
      
      - name: 🔨 Build with Maven
        run: mvn clean package -DskipTests "-Dskip.build.increment=true"
        shell: pwsh
      
      - name: 📦 Create Windows Installer
        run: .\build-installer.ps1
        shell: pwsh
      
      - name: 📊 Calculate SHA256
        id: sha256
        run: |
          $hash = (Get-FileHash target\installer\EditeurPanovisu-Setup-*.exe -Algorithm SHA256).Hash
          echo "HASH=$hash" >> $env:GITHUB_OUTPUT
        shell: pwsh
      
      - name: 📤 Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: target/installer/*.exe
          retention-days: 30

  build-macos:
    name: 🍎 macOS Installer
    runs-on: macos-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java 25
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'
      
      - name: � Create api-keys.properties
        run: |
          cp api-keys.properties.template api-keys.properties
          echo "✅ api-keys.properties créé depuis template"
      
      - name: �️ Convert icon to .icns
        run: |
          # Créer l'icône macOS si elle n'existe pas
          if [ ! -f "images/panovisu.icns" ]; then
            echo "⚠️  Icône .icns manquante, création d'un placeholder"
            # On utilise l'icône PNG comme fallback
            cp images/panovisu.png images/panovisu.icns || true
          fi
      
      - name: 🔨 Build with Maven
        run: mvn clean package -DskipTests -Dskip.build.increment=true
      
      - name: 📦 Create macOS DMG
        run: |
          APP_VERSION="${{ github.event.inputs.version || '3.3.2' }}"
          
          # Trouver le nom exact du JAR
          MAIN_JAR=$(ls target/editeurPanovisu-*-SNAPSHOT.jar | xargs basename)
          echo "📦 JAR trouvé: $MAIN_JAR"
          
          jpackage \
            --type dmg \
            --name EditeurPanovisu \
            --app-version "$APP_VERSION" \
            --vendor "PanoVisu" \
            --input target \
            --main-jar "$MAIN_JAR" \
            --main-class editeurpanovisu.EditeurPanovisu \
            --runtime-image "$JAVA_HOME" \
            --dest target/installer \
            --mac-package-name EditeurPanovisu \
            --mac-package-identifier fr.panovisu.editeur \
            --java-options "-Xmx2048m" \
            --java-options "-Dfile.encoding=UTF-8" \
            --verbose || {
              echo "❌ Erreur jpackage, essai sans icône..."
              jpackage \
                --type dmg \
                --name EditeurPanovisu \
                --app-version "$APP_VERSION" \
                --vendor "PanoVisu" \
                --input target \
                --main-jar "$MAIN_JAR" \
                --main-class editeurpanovisu.EditeurPanovisu \
                --runtime-image "$JAVA_HOME" \
                --dest target/installer \
                --mac-package-name EditeurPanovisu \
                --mac-package-identifier fr.panovisu.editeur \
                --java-options "-Xmx2048m" \
                --java-options "-Dfile.encoding=UTF-8"
            }
      
      - name: 📊 Calculate SHA256
        id: sha256
        run: |
          HASH=$(shasum -a 256 target/installer/*.dmg | cut -d ' ' -f 1)
          echo "HASH=$HASH" >> $GITHUB_OUTPUT
      
      - name: 📤 Upload macOS Installer
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: target/installer/*.dmg
          retention-days: 30

  build-linux-portable:
    name: 🐧 Linux Portable Archive
    runs-on: windows-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ☕ Setup Java 25
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'
      
      - name: 📝 Create api-keys.properties
        run: |
          Copy-Item api-keys.properties.template api-keys.properties
          Write-Host "api-keys.properties cree depuis template"
        shell: pwsh
      
      - name: 🔨 Build with Maven
        run: mvn clean package -DskipTests "-Dskip.build.increment=true"
        shell: pwsh
      
      - name: 📦 Create Linux Portable Archive
        run: .\create-linux-portable.ps1
        shell: pwsh
      
      - name: 📊 Calculate SHA256
        id: sha256
        run: |
          $zipHash = (Get-FileHash target\EditeurPanovisu-Linux-Portable-*.zip -Algorithm SHA256).Hash
          $tarHash = (Get-FileHash target\EditeurPanovisu-Linux-Portable-*.tar.gz -Algorithm SHA256).Hash
          echo "ZIP_HASH=$zipHash" >> $env:GITHUB_OUTPUT
          echo "TAR_HASH=$tarHash" >> $env:GITHUB_OUTPUT
        shell: pwsh
      
      - name: 📤 Upload Linux Portable Archives
        uses: actions/upload-artifact@v4
        with:
          name: linux-portable
          path: |
            target/EditeurPanovisu-Linux-Portable-*.zip
            target/EditeurPanovisu-Linux-Portable-*.tar.gz
          retention-days: 30

  create-release:
    name: 🎉 Create GitHub Release
    needs: [build-windows, build-macos, build-linux-portable]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📥 Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: ./artifacts/windows
      
      - name: 📥 Download macOS Installer
        uses: actions/download-artifact@v4
        with:
          name: macos-installer
          path: ./artifacts/macos
      
      - name: 📥 Download Linux Portable Archive
        uses: actions/download-artifact@v4
        with:
          name: linux-portable
          path: ./artifacts/linux-portable
      
      - name: �📊 Generate checksums
        id: checksums
        run: |
          echo "# 📊 SHA256 Checksums" > checksums.txt
          echo "" >> checksums.txt
          
          for file in artifacts/**/*; do
            if [ -f "$file" ]; then
              HASH=$(sha256sum "$file" | cut -d ' ' -f 1)
              FILENAME=$(basename "$file")
              echo "$HASH  $FILENAME" >> checksums.txt
            fi
          done
          
          cat checksums.txt
      
      - name: 📝 Extract build number and version
        id: build_info
        run: |
          # Extraire le numéro de build depuis le fichier Java Properties
          BUILD_NUM=$(grep '^build\.number=' build.num 2>/dev/null | cut -d'=' -f2 || echo "unknown")
          echo "BUILD_NUM=$BUILD_NUM" >> $GITHUB_OUTPUT
          echo "✅ Build number: $BUILD_NUM"
          
          # Déterminer la version (depuis le tag ou depuis l'input)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="v${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version: $VERSION"
      
      - name: 🎉 Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.build_info.outputs.VERSION }}
          name: "EditeurPanovisu ${{ steps.build_info.outputs.VERSION }} - Build ${{ steps.build_info.outputs.BUILD_NUM }}"
          body: |
            ## 🐧 EditeurPanovisu ${{ github.ref_name }} - Support Linux Portable Amélioré
            
            **Build** : ${{ steps.build_info.outputs.BUILD_NUM }}  
            **Priorité** : � Archive portable Linux + 🔧 Corrections bugs Linux + � Documentation complète
            
            ### 🐧 Nouveautés v3.3.3 - Distribution Linux Simplifiée
            
            **Archive portable Linux** 📦
            - ✅ **ZIP et TAR.GZ** : Archives complètes autonomes sans dépendances système
            - 📝 **Documentation triple** : INSTALLATION.md (Markdown), .txt (texte), .html (web stylisé)
            - 🚀 **Script de lancement** : Détection automatique Java, vérification version, configuration JavaFX 3D
            - 📁 **Structure propre** : Tous les fichiers Windows (.bat/.vbs) exclus
            - � **Installation simple** : Extraire, chmod +x, lancer - aucune installation système requise
            
            **Corrections Linux** 🐛
            - ✅ **Cache panoramas** : Correction utilisation cache (700ms → <50ms au chargement)
            - ✅ **Blocage modal** : Fenêtre configuration ne bloque plus sous Linux
            - ✅ **NullPointerException** : Protection contre crashes au rechargement projet
            - ✅ **Build Maven** : Toutes les classes incluses dans le JAR (93/93)
            
            **Optimisations WebGL** 🎮
            - Filtrage trilinéaire (LinearMipmapLinearFilter) pour netteté à toutes distances
            - Anisotropie dynamique basée sur capacités GPU (jusqu'à 16×)
            - Mipmaps automatiques pour rendu optimal
            - Détection compression temps réel avec logs détaillés
            
            **Qualité JPEG augmentée** 📸
            - Panoramas équi : 70% → 90% (niveaux), 95% (principal)
            - Panoramas cubes : 70% → 88% (niveaux), 92% (principal)
            - Sharpening optimisé (0.15-0.2) pour netteté sans artefacts
            
            **Outils de diagnostic inclus** 🛠️
            - `diagnostic-webgl.html` : Test capacités GPU navigateur
            - `test-compression.php` : Vérification compression serveur
            - `.htaccess` pré-configuré pour éviter compression automatique
            
            ### 🎯 Visualiseur Panoramique 3D Haute Qualité
            
            **Interface modernisée avec icônes** 🎨
            - Boutons icônes intuitifs (home, photo, boussole, œil)
            - Adaptation automatique au thème clair/sombre
            - Mode plein écran haute résolution (popup 1200×780)
            
            **Qualité d'affichage multipliée par 4** 🚀
            - Faces de cube : 500×500 → 1000×1000 pixels
            - Préservation parfaite des panoramas 8192×4096
            - Performances GPU : traitement total < 500ms
            
            ### 🗺️ Refonte Carte et Géolocalisation
            
            **Migration vers Leaflet** �
            - Remplacement de NavigateurCarteGluon (bugs crashes)
            - Architecture lazy loading avec callbacks anti-bugs JavaFX
            - Marqueurs draggables déplaçables à la souris
            - Radar champ de vision configurable 0-240m (×3 vs ancien)
            
            **Géocodage amélioré** 📍
            - Recherche d'adresse via Nominatim OpenStreetMap
            - API complète : ajouteMarqueur(), afficheRadar(), allerCoordonnees()
            - Chargement asynchrone pour interface réactive
            
            ### ⚡ Accélération GPU (OpenCL)
            
            - 🎮 **Traitement GPU** : Accélération matérielle pour toutes les opérations de traitement d'images
            - 📊 **Performances** : 
              - Chargement des visites : **3.4× plus rapide** (15s → 4.5s)
              - Affichage à l'écran : **10× plus rapide** (1000ms → 100ms)
              - Redimensionnement batch : **1.7× plus rapide**
            - 🎨 **Qualité d'image** : Interpolation Bicubic/Lanczos3 élimine le crénelage
            - 🔄 **Fallback automatique** : Bascule sur CPU si GPU indisponible
            
            **Support GPU**
            - Compatible OpenCL 1.2+ (NVIDIA CUDA, AMD ROCm, Intel)
            - Auto-routing intelligent GPU/CPU selon taille d'image
            - Gestion robuste des colorspaces (CMYK, YCbCr, RGB)
            
            ### 🎨 Système de thèmes enrichi
            
            **24 thèmes disponibles**
            - 9 thèmes AtlantaFX (Primer Light/Dark, Nord Light/Dark, Cupertino Light/Dark, Dracula, Mocha, Gruvbox)
            - 2 thèmes MaterialFX (Light/Dark)
            - 2 thèmes FlatLaf (Light/Dark)
            - 2 thèmes Legacy (Clair/Foncé)
            - 2 thèmes Acidulés (Clair/Foncé)
            - 2 thèmes Modernes (Clair/Foncé)
            - 8 thèmes Minimalistes (Bleu/Vert/Rouge/Mauve - Clair/Foncé)
            
            **Icônes dynamiques colorées** 🎨
            - Les icônes SVG prennent automatiquement la couleur du thème
            - Conversion PNG dynamique avec Apache Batik
            - Visibilité optimisée thèmes sombres
            
            ### 📥 Téléchargements
            
            | Plateforme | Fichier | Taille | Notes |
            |------------|---------|--------|-------|
            | 🪟 **Windows 10/11** | `EditeurPanovisu-Setup-3.3.3.exe` | ~188 MB | Installeur automatique |
            | 🍎 **macOS 11+** | `EditeurPanovisu-3.3.3.dmg` | ~200 MB | Image disque |
            | 🐧 **Linux** | `EditeurPanovisu-Linux-Portable-3.3.3.zip` | ~150 MB | ⭐ **Recommandé** |
            | 🐧 **Linux** | `EditeurPanovisu-Linux-Portable-3.3.3.tar.gz` | ~145 MB | Alternative TAR |
            
            📖 **Installation Linux** : Consultez [INSTALLATION.md](https://github.com/llang57/editeurPanovisu/blob/master/doc/install/INSTALLATION.md) pour le guide complet
            
            ### ⚠️ Versions précédentes
            
            **v3.3.2** : Qualité images optimale en ligne (WebGL, compression, diagnostic)  
            **v3.3.1** : Système de thèmes enrichi (24 thèmes, icônes dynamiques colorées)  
            **v3.3.0** : Accélération GPU OpenCL, performances 3-10× améliorées  
            **v3.2.0** : Personnalisation avancée des hotspots (16 animations, couleurs, icônes personnalisées)  
            **v3.1.0** : Correction critique case-sensitivity pour serveurs Linux  
            **v3.0.0** : Intelligence artificielle (Ollama), génération de descriptions automatiques
            
            ### 📋 Configuration requise
            
            - **Windows** : Windows 10/11 64-bit
            - **macOS** : macOS 11 Big Sur ou supérieur
            - **Linux** : Debian 11+, Ubuntu 20.04+, Fedora 35+
            - **RAM** : 4 GB minimum, 8 GB recommandé
            - **GPU** : Optionnel - OpenCL 1.2+ pour accélération (NVIDIA, AMD, Intel)
            - **Disque** : 500 MB d'espace libre
            
            ⚠️ **Java runtime inclus** - Aucune installation Java séparée requise !
            
            ### 🔧 Installation
            
            #### Windows
            1. Téléchargez `EditeurPanovisu-Setup-3.3.2.exe`
            2. Double-cliquez pour installer
            3. Suivez l'assistant d'installation
            4. Lancez via le raccourci Bureau ou Menu Démarrer
            
            #### macOS
            1. Téléchargez `EditeurPanovisu-3.3.2.dmg`
            2. Ouvrez le fichier `.dmg`
            3. Glissez l'icône vers le dossier Applications
            4. Lancez depuis le Launchpad
            
            #### Linux (Debian/Ubuntu)
            ```bash
            sudo dpkg -i editeurpanovisu_3.3.2-1_amd64.deb
            # ou
            sudo apt install ./editeurpanovisu_3.3.2-1_amd64.deb
            ```
            
            #### Linux (RedHat/Fedora)
            ```bash
            sudo rpm -i editeurpanovisu-3.3.2-1.x86_64.rpm
            # ou
            sudo dnf install ./editeurpanovisu-3.3.2-1.x86_64.rpm
            ```
            
            ### 🔐 Vérification d'intégrité
            
            Checksums SHA256 disponibles dans le fichier `checksums.txt` joint.
            
            ### 📚 Documentation
            
            - [Guide d'installation](doc/installation/INSTALLATION_UTILISATEUR.md)
            - [Documentation complète](doc/README.md)
            - [Configuration API](doc/guides/CONFIGURATION_API_KEYS.md)
            
            ### 🙏 Remerciements
            
            Merci à tous les contributeurs et testeurs !
          files: |
            artifacts/windows/*
            artifacts/macos/*
            artifacts/linux-portable/*
            checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-summary:
    name: 📊 Build Summary
    needs: [build-windows, build-macos, build-linux-portable]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "# 🎉 Build Multi-Platform Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Windows** installer created" >> $GITHUB_STEP_SUMMARY
          echo "✅ **macOS** installer created" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Linux** portable archives created (ZIP + TAR.GZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 All artifacts ready for download!" >> $GITHUB_STEP_SUMMARY
