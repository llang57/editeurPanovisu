#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de nettoyage des fichiers de traduction PanoVisu
Supprime les cl√©s obsol√®tes qui ne sont plus pr√©sentes dans le fichier de r√©f√©rence
"""

import os
import re
from pathlib import Path
from datetime import datetime

# Configuration
I18N_DIR = Path(__file__).parent.parent / "src" / "editeurpanovisu" / "i18n"
REFERENCE_FILE = "PanoVisu.properties"

# Langues √† nettoyer (exclut le fichier de r√©f√©rence)
TRANSLATION_FILES = [
    'PanoVisu_fr.properties',
    'PanoVisu_de.properties',
    'PanoVisu_es_ES.properties',
    'PanoVisu_pt.properties',
    'PanoVisu_en.properties'
]


def parse_properties_file(filepath):
    """
    Parse un fichier .properties et extrait les cl√©s avec leurs lignes
    
    Args:
        filepath: Chemin vers le fichier .properties
        
    Returns:
        tuple: (dict {cl√©: valeur}, list de toutes les lignes)
    """
    properties = {}
    lines = []
    
    if not filepath.exists():
        return properties, lines
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            
        for line_num, line in enumerate(lines):
            # Garder les lignes vides et commentaires
            stripped = line.strip()
            if not stripped or stripped.startswith('#') or stripped.startswith('!'):
                continue
            
            # Parser la ligne cl√©=valeur
            match = re.match(r'^([^=:]+)\s*[=:]\s*(.*)$', stripped)
            if match:
                key = match.group(1).strip()
                value = match.group(2).strip()
                properties[key] = (value, line_num)
                
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la lecture de {filepath.name}: {e}")
    
    return properties, lines


def clean_translation_file(ref_keys, translation_file):
    """
    Nettoie un fichier de traduction en supprimant les cl√©s obsol√®tes
    
    Args:
        ref_keys: Set des cl√©s du fichier de r√©f√©rence
        translation_file: Nom du fichier de traduction √† nettoyer
        
    Returns:
        tuple: (nombre de cl√©s supprim√©es, liste des cl√©s supprim√©es)
    """
    filepath = I18N_DIR / translation_file
    
    if not filepath.exists():
        print(f"‚ùå Fichier non trouv√©: {translation_file}")
        return 0, []
    
    print(f"\nüîç Analyse de {translation_file}...")
    
    # Parser le fichier
    properties, lines = parse_properties_file(filepath)
    
    # Identifier les cl√©s obsol√®tes
    trans_keys = set(properties.keys())
    obsolete_keys = trans_keys - ref_keys
    
    if not obsolete_keys:
        print(f"‚úÖ Aucune cl√© obsol√®te trouv√©e")
        return 0, []
    
    print(f"‚ö†Ô∏è  {len(obsolete_keys)} cl√©(s) obsol√®te(s) trouv√©e(s):")
    for key in sorted(obsolete_keys):
        print(f"   - {key}")
    
    # Cr√©er une sauvegarde
    backup_path = filepath.with_suffix('.properties.bak')
    print(f"üíæ Cr√©ation d'une sauvegarde: {backup_path.name}")
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f_in:
            with open(backup_path, 'w', encoding='utf-8') as f_out:
                f_out.write(f_in.read())
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la sauvegarde: {e}")
        return 0, []
    
    # Filtrer les lignes
    lines_to_keep = []
    lines_removed = 0
    
    for i, line in enumerate(lines):
        stripped = line.strip()
        
        # Garder les lignes vides et commentaires
        if not stripped or stripped.startswith('#') or stripped.startswith('!'):
            lines_to_keep.append(line)
            continue
        
        # Parser la ligne
        match = re.match(r'^([^=:]+)\s*[=:]\s*(.*)$', stripped)
        if match:
            key = match.group(1).strip()
            
            # Garder seulement si la cl√© est dans le fichier de r√©f√©rence
            if key in ref_keys:
                lines_to_keep.append(line)
            else:
                lines_removed += 1
                print(f"   üóëÔ∏è  Suppression: {key}")
        else:
            # Ligne malform√©e, on la garde par s√©curit√©
            lines_to_keep.append(line)
    
    # √âcrire le fichier nettoy√©
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.writelines(lines_to_keep)
        print(f"‚úÖ Fichier nettoy√©: {lines_removed} ligne(s) supprim√©e(s)")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'√©criture du fichier: {e}")
        # Restaurer la sauvegarde en cas d'erreur
        with open(backup_path, 'r', encoding='utf-8') as f_in:
            with open(filepath, 'w', encoding='utf-8') as f_out:
                f_out.write(f_in.read())
        return 0, []
    
    return lines_removed, sorted(obsolete_keys)


def main():
    """
    Fonction principale
    """
    print()
    print("=" * 70)
    print("  NETTOYAGE DES FICHIERS DE TRADUCTION PANOVISU")
    print("=" * 70)
    print()
    
    # V√©rifier que le r√©pertoire existe
    if not I18N_DIR.exists():
        print(f"‚ùå Erreur: Le r√©pertoire {I18N_DIR} n'existe pas")
        return 1
    
    # Charger le fichier de r√©f√©rence
    ref_path = I18N_DIR / REFERENCE_FILE
    if not ref_path.exists():
        print(f"‚ùå Erreur: Le fichier de r√©f√©rence {REFERENCE_FILE} n'existe pas")
        return 1
    
    print(f"üìñ Lecture du fichier de r√©f√©rence: {REFERENCE_FILE}")
    ref_properties, _ = parse_properties_file(ref_path)
    ref_keys = set(ref_properties.keys())
    print(f"   {len(ref_keys)} cl√©s de r√©f√©rence trouv√©es")
    
    # Nettoyer chaque fichier de traduction
    total_removed = 0
    all_obsolete = {}
    
    for translation_file in TRANSLATION_FILES:
        removed, obsolete = clean_translation_file(ref_keys, translation_file)
        total_removed += removed
        if obsolete:
            all_obsolete[translation_file] = obsolete
    
    # R√©sum√©
    print()
    print("=" * 70)
    print("üìä R√âSUM√â DU NETTOYAGE")
    print("=" * 70)
    
    if total_removed == 0:
        print("‚úÖ Tous les fichiers sont d√©j√† propres !")
    else:
        print(f"üóëÔ∏è  Total de cl√©s obsol√®tes supprim√©es: {total_removed}")
        print()
        print("Fichiers modifi√©s:")
        for filename, keys in all_obsolete.items():
            print(f"   ‚Ä¢ {filename}: {len(keys)} cl√©(s)")
        
        print()
        print("üíæ Les sauvegardes ont √©t√© cr√©√©es avec l'extension .properties.bak")
        print("   Vous pouvez les supprimer si le r√©sultat est satisfaisant.")
    
    print()
    print("‚úÖ Nettoyage termin√© !")
    print()
    
    # Suggestion d'ex√©cuter l'analyse
    print("üí° Astuce: Ex√©cutez check-translations.py pour v√©rifier le r√©sultat")
    print()
    
    return 0


if __name__ == '__main__':
    exit(main())
